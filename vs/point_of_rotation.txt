#include<bits/stdc++.h>
using namespace std;
// class Solution {
// public:
//     int search(vector<int>& nums, int target) {
//         int l = nums.size();
//         int l1=l;
//         int ri=l-1;
//         int li=0;
//         int p;
//         int mid;
//         while(li<ri)
//         { if(l%2==0){
//             mid=l1/2;
//             if(nums[mid]>nums[ri]){li=mid;}
//             else {ri=mid;}
//             l1=((ri-li)/2)+1;
//             }
//          else if(l%2!=0){
//               mid=(l1/2)+1;
//             if(nums[mid]>nums[ri]){li=mid;}
//             else {ri=mid;}
//             l1=((ri-li)/2)+1;
             
//          }
//         }
//         p=mid;
  
        
//     return p;
//     }
// };
int search(vector<int>&nums){
        int l=nums.size();
        int l1=l;
        int ri=l-1;
        int li=0;
        int mid=l1/2;
        int p;
        bool flag=false;
        if(nums[li]<nums[ri]){flag=true;return -1;}
        while((flag==false) && !(nums[mid]>nums[mid+1])){
           if(l1%2!=0){ mid=l1/2;
            if(nums[mid]>nums[ri]){li=mid;}
            else {ri=mid;}
            l1=((ri-li)/2)+1;
            }
            else if(l1%2==0){
                mid=l1+1/2;
            if(nums[mid]>nums[ri]){li=mid;}
            else {ri=mid;}
            l1=((ri-li)/2)+1;
            }
        }
        p=mid;
        return nums[p];
     }
int main()
{
    vector<int>nums;
    nums.push_back(4);
      nums.push_back(5);
        nums.push_back(6);
          nums.push_back(7);
          nums.push_back(8);
        //   nums.push_back(0);
        //       nums.push_back(1);
        //       nums.push_back(2);
            //   nums.push_back(3);
    int target=0;
  
    //  int search(vector<int>&nums, int target){
    //     int l=nums.size();
    //     int l1=l;
    //     int ri=l-1;
    //     int li=0;
    //     int mid=l1/2;
    //     int p;
    //     bool flag=false;
    //     if(nums[li]<nums[ri]){flag=true;return -1;}
    //     while((flag==false) && !(nums[mid]>nums[mid+1])){
    //         mid=l1/2;
    //         if(nums[mid]>nums[ri]){li=mid;}
    //         else {ri=mid;}
    //         l1=((ri-li)/2)+1;
    //         }
    //     p=mid;
    //     return p;
    //  }
    int j=(search(nums));
    cout<<j;
    return 0;
}